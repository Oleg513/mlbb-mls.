# handlers/guides.py
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from enum import Enum, auto
from typing import Dict
import logging
from utils.data_loader import load_json_data

logger = logging.getLogger(__name__)

class States(Enum):
    GUIDES_MENU = auto()
    CLASS_SELECTION = auto()
    INTERACTIVE_RECOMMENDATIONS = auto()
    # –Ü–Ω—à—ñ —Å—Ç–∞–Ω–∏...

guides_data = load_json_data('data/menu_requests.json')  # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —Ç—É—Ç –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –º–µ–Ω—é –≥–∞–π–¥—ñ–≤

async def guides_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    buttons = [
        [KeyboardButton("üìù –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É"), KeyboardButton("üí° –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")],
        [KeyboardButton("üé• –í—ñ–¥–µ–æ-–≥–∞–π–¥–∏"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("üìö –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
    return States.GUIDES_MENU

async def send_class_strategies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    strategies = guides_data.get('class_strategies', "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
    await update.message.reply_text(strategies, parse_mode='HTML', disable_web_page_preview=True)

async def send_interactive_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    classes = ["–¢–∞–Ω–∫", "–ë–æ—Ä–µ—Ü—å", "–ú–∞–≥", "–°—Ç—Ä—ñ–ª–µ—Ü—å", "–ê—Å–∞—Å–∏–Ω", "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"]
    buttons = []
    for i in range(0, len(classes), 3):
        row = classes[i:i + 3]
        buttons.append([KeyboardButton(cls) for cls in row])
    buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("üí° **–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≥–∞–π–¥—ñ–≤:**", parse_mode='Markdown', reply_markup=reply_markup)
    return States.INTERACTIVE_RECOMMENDATIONS

async def handle_interactive_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_class = update.message.text.strip()
    classes = ["–¢–∞–Ω–∫", "–ë–æ—Ä–µ—Ü—å", "–ú–∞–≥", "–°—Ç—Ä—ñ–ª–µ—Ü—å", "–ê—Å–∞—Å–∏–Ω", "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"]
    if selected_class in classes:
        recommendations = f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≥–∞–π–¥—ñ–≤ –¥–ª—è –∫–ª–∞—Å—É {selected_class}:**\n\n" \
                           f"‚Ä¢ [–ì–∞–π–¥ –¥–ª—è {selected_class} 1](https://example.com/guide-{selected_class.lower()}-1)\n" \
                           f"‚Ä¢ [–ì–∞–π–¥ –¥–ª—è {selected_class} 2](https://example.com/guide-{selected_class.lower()}-2)\n\n" \
                           f"üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/recommendations-{selected_class.lower()}"
        await update.message.reply_text(recommendations, parse_mode='Markdown', disable_web_page_preview=True)
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        buttons = []
        for i in range(0, len(classes), 3):
            row = classes[i:i + 3]
            buttons.append([KeyboardButton(cls) for cls in row])
        buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üí° **–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≥–∞–π–¥—ñ–≤:**", parse_mode='Markdown', reply_markup=reply_markup)
        return States.INTERACTIVE_RECOMMENDATIONS
    elif selected_class == "üîô –ù–∞–∑–∞–¥":
        buttons = [
            [KeyboardButton("üìù –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É"), KeyboardButton("üí° –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")],
            [KeyboardButton("üé• –í—ñ–¥–µ–æ-–≥–∞–π–¥–∏"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üìö –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.GUIDES_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–±—Ä–∞–Ω–∞ –æ–ø—Ü—ñ—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∂–æ–¥–Ω–æ–º—É –∫–ª–∞—Å—É.")
        return States.INTERACTIVE_RECOMMENDATIONS

async def send_video_guides(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    video_guides = guides_data.get('video_guides', "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
    await update.message.reply_text(video_guides, parse_mode='Markdown', disable_web_page_preview=True)

async def handle_guides_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    logger.info(f"–í–∏–±—ñ—Ä –≤ –ì–∞–π–¥–∞—Ö: {user_input}")
    
    if user_input == "üìù –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É":
        await send_class_strategies(update, context)
        return States.GUIDES_MENU
    elif user_input == "üí° –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó":
        return await send_interactive_recommendations(update, context)
    elif user_input == "üé• –í—ñ–¥–µ–æ-–≥–∞–π–¥–∏":
        await send_video_guides(update, context)
        return States.GUIDES_MENU
    elif user_input == "üîô –ù–∞–∑–∞–¥":
        from handlers.main_menu import start
        return await start(update, context)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
        return States.GUIDES_MENU
